{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Router } from '@angular/router';\nimport * as firebase from 'firebase/app';\nimport { AngularFireAuth } from 'angularfire2/auth';\nimport { AngularFirestore } from 'angularfire2/firestore';\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { User } from '../shared/models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angularfire2/auth\";\nimport * as i2 from \"angularfire2/firestore\";\nimport * as i3 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/(function () {\n  var AuthService = /*#__PURE__*/function () {\n    function AuthService(afAuth, afs, router) {\n      var _this = this;\n\n      _classCallCheck(this, AuthService);\n\n      this.afAuth = afAuth;\n      this.afs = afs;\n      this.router = router;\n      this.userDetails = null; // userData: user = null;\n\n      this.isAuthenticated = false;\n      this.emailIsVerified = false;\n      afs.firestore.settings({\n        timestampsInSnapshots: true\n      });\n      this.user$ = this.afAuth.authState.pipe(switchMap(function (user) {\n        if (user) {\n          //Checks if request comes from the app\n          if (navigator.userAgent.indexOf('gonative') > -1) {\n            _this.loggedInMenuApp();\n          }\n\n          _this.isAuthenticated = true;\n          _this.emailIsVerified = user.emailVerified;\n          return _this.afs.doc(\"users/\".concat(user.uid)).valueChanges();\n        } else {\n          if (navigator.userAgent.indexOf('gonative') > -1) {\n            _this.loggedOutMenuApp();\n          }\n\n          _this.isAuthenticated = false;\n          return of(null);\n        }\n      })); // this.afAuth.authState.subscribe(res => {\n      //   if (res && res.uid) {\n      //     this.isAuthenticated = true;\n      //       this.emailIsVerified = res.emailVerified;\n      //     // this.emailIsVerified = res.emailVerified;\n      //   } else {\n      //     this.isAuthenticated = false;\n      //     this.emailIsVerified = true;\n      //   }\n      // });\n    }\n\n    _createClass(AuthService, [{\n      key: \"updateUserData\",\n      value: function updateUserData(user) {\n        // Sets user data to firestore on login\n        var userRef = this.afs.doc(\"users/\".concat(user.uid));\n        return userRef.set(user, {\n          merge: true\n        });\n      }\n    }, {\n      key: \"emailSignUp\",\n      value: function emailSignUp(data) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _this2 = this;\n\n          var liumail, userToVer, errorCode, errorMessage;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  liumail = data.liuid + '@student.liu.se';\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return this.afAuth.auth.createUserWithEmailAndPassword(liumail, data.password);\n\n                case 4:\n                  userToVer = firebase.auth().currentUser;\n                  userToVer.sendEmailVerification().then(function () {\n                    var newUser = {\n                      uid: firebase.auth().currentUser.uid,\n                      email: liumail,\n                      firstname: data.firstname,\n                      lastname: data.lastname,\n                      liuid: data.liuid,\n                      program: data.program,\n                      year: data.year,\n                      engineerbachelor: data.engineerbachelor,\n                      engineermaster: data.engineermaster,\n                      specialfood: data.specialfood,\n                      nekorfek: data.nekorfek,\n                      filfakspecialization: data.filfakspecialization,\n                      verified: false,\n                      roles: {\n                        student: true\n                      }\n                    };\n\n                    _this2.updateUserData(newUser); // return this.createProfile(email)\n                    // return this.setUserDoc(user); // create initial user document\n\n                  }).catch(function (error) {\n                    console.log(error);\n                  }); // return this.setUserDoc(user) // create initial user document\n\n                  _context.next = 13;\n                  break;\n\n                case 8:\n                  _context.prev = 8;\n                  _context.t0 = _context[\"catch\"](1);\n                  errorCode = _context.t0.code;\n\n                  if (errorCode == \"auth/email-already-in-use\") {\n                    errorMessage = \"Det finns redan ett konto registrerat på detta LiU-ID. Logga in eller återställ lösenord.\";\n                  } else if (errorCode == \"auth/invalid-email\") {\n                    errorMessage = \"Inget giltigt LiU-ID\";\n                  } else if (errorCode == \"auth/operation-not-allowed\") {\n                    errorMessage = \"Operation not allowed\";\n                  } else if (errorCode == \"auth/weak-password\") {\n                    errorMessage = \"Svagt lösenord. Testa igen.\";\n                  } else {\n                    errorMessage = \"Något gick fel. Testa igen.\";\n                  }\n\n                  throw new Error(errorMessage);\n\n                case 13:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[1, 8]]);\n        }));\n      }\n    }, {\n      key: \"newVerify\",\n      value: function newVerify() {\n        var userToVer = firebase.auth().currentUser;\n        userToVer.sendEmailVerification();\n      }\n    }, {\n      key: \"emailLogin\",\n      value: function emailLogin(email, password) {\n        return this.afAuth.auth.signInWithEmailAndPassword(email, password);\n      } // Update properties on the user document\n\n    }, {\n      key: \"updateUser\",\n      value: function updateUser(user, data) {\n        return this.afs.doc(\"users/\".concat(user.uid)).update(data);\n      } // If error, console log and notify user\n\n    }, {\n      key: \"handleError\",\n      value: function handleError(error) {\n        console.error(error); // this.notify.update(error.message, 'error')\n      } // createProfile(value) {\n      // var userDocRef = this.afs.collection('users').doc(this.afAuth.auth.currentUser.uid);\n      //   return userDocRef.set({\n      //     uid: value,\n      //     confirmedEmail: false,\n      //   })\n      // }\n      // Sets user data to firestore after succesful login\n      // private setUserDoc(user) {\n      //   var userDocRef = this.afs.collection('users').doc(this.afAuth.auth.currentUser.uid);\n      //   const data: user = {\n      //     uid: user.uid,\n      //     email: user.email || null\n      //   }\n      //   return userDocRef.set(data)\n      // }\n\n    }, {\n      key: \"isSignedIn\",\n      value: function isSignedIn() {\n        return this.isAuthenticated;\n      }\n    }, {\n      key: \"loggedInMenuApp\",\n      value: function loggedInMenuApp() {\n        var items = [{\n          subLinks: [],\n          label: \"Hem\",\n          url: \"https://teamdagarna.com/\",\n          icon: \"fa-home\"\n        }, {\n          subLinks: [{\n            subLinks: [],\n            label: \"Företagen 2021\",\n            url: \"https://teamdagarna.com/companies\"\n          }, {\n            subLinks: [],\n            label: \"Event\",\n            url: \"https://teamdagarna.com/events\"\n          }, {\n            subLinks: [],\n            label: \"TEAM-bloggen\",\n            url: \"https://teamdagarna.com/blogposts\"\n          }, // {\n          //   subLinks: [],\n          //   label: \"Mässkarta\",\n          //   url: \"https://teamdagarna.com/masskarta\"\n          // },\n          // {\n          //  subLinks: [],\n          //   label: \"Pusseljakten\",\n          //   url: \"https://teamdagarna.com/pusseljakten\" --/>\n          // }, --!>\n          // {\n          //   subLinks: [],\n          //   label: \"Företagsskyltar\",\n          //   url: \"https://teamdagarna.com/foretagsskyltar\"\n          // },\n          // {\n          //   subLinks: [],\n          //   label: \"Sök värd\",\n          //   url: \"https://teamdagarna.com/sokvard\"\n          // },\n          {\n            subLinks: [],\n            label: \"Kontaktsamtal\",\n            url: \"https://teamdagarna.com/interview\"\n          } //{\n          // subLinks: [],\n          // label: \"Sök DreamTEAM\",\n          // url: \"https://teamdagarna.com/sokdreamteam\"\n          // }\n          ],\n          label: \"För Studenter\",\n          isGrouping: true,\n          icon: \"fa-users\"\n        }, {\n          subLinks: [{\n            subLinks: [],\n            label: \"Om TEAM-dagarna\",\n            url: \"https://teamdagarna.com/about\"\n          }, {\n            subLinks: [],\n            label: \"FAQ\",\n            url: \"https://teamdagarna.com/faq\"\n          }, // {\n          //   subLinks: [],\n          //   label: \"Erbjudande\",\n          //   url: \"https://teamdagarna.com/weoffer\"\n          // },\n          // {\n          //   subLinks: [],\n          //   label: \"Hitta hit\",\n          //   url: \"https://teamdagarna.com/find\"\n          // },\n          {\n            subLinks: [],\n            label: \"Företagsanmälan\",\n            url: \"https://teamdagarna.com/companyapplication\"\n          } // {\n          //  subLinks: [],\n          //  label: \"Inloggning gästföretag\",\n          //  url: \"https://teamdagarna.com/companysignin\"\n          // }\n          ],\n          label: \"För företag\",\n          isGrouping: true,\n          icon: \"fa-briefcase\"\n        }, {\n          subLinks: [{\n            subLinks: [],\n            label: \"Kontakt\",\n            url: \"https://teamdagarna.com/dreamteam\"\n          }, {\n            subLinks: [],\n            label: \"Om TEAM-dagarna\",\n            url: \"https://teamdagarna.com/about\"\n          }, {\n            subLinks: [],\n            label: \"Hållbarhet\",\n            url: \"https://teamdagarna.com/hallbarhet\"\n          }, {\n            subLinks: [],\n            label: \"Integritetspolicy\",\n            url: \"https://teamdagarna.com/integritetspolicy\"\n          }],\n          label: \"Om oss\",\n          isGrouping: true,\n          icon: \"fa-question\"\n        }, {\n          subLinks: [],\n          label: \"English info\",\n          url: \"https://teamdagarna.com/about-english\",\n          icon: \"fa-cog\"\n        }, {\n          subLinks: [{\n            subLinks: [],\n            label: \"Min profil\",\n            url: \"https://teamdagarna.com/profile\"\n          }, {\n            sublinks: [],\n            label: \"Mina favoritföretag\",\n            url: \"https://teamdagarna.com/favoritforetag\",\n            icon: \"fa-heart\"\n          }],\n          label: \"Mina sidor\",\n          isGrouping: true,\n          icon: \"fa-user\"\n        }, {\n          subLinks: [],\n          label: \"Logga ut\",\n          url: \"https://teamdagarna.com/signout\",\n          icon: \"fa-sign-out\"\n        }];\n        var json = JSON.stringify(items);\n        window.location.href = 'gonative://sidebar/setItems?items=' + encodeURIComponent(json);\n      }\n    }, {\n      key: \"loggedOutMenuApp\",\n      value: function loggedOutMenuApp() {\n        var items2 = [{\n          subLinks: [],\n          label: \"Hem\",\n          url: \"https://teamdagarna.com/\",\n          icon: \"fa-home\"\n        }, {\n          subLinks: [// OBS LÄGG TILL KOMMA EFTER kontaktsamtal\n          {\n            subLinks: [],\n            label: \"Företagen 2021\",\n            url: \"https://teamdagarna.com/companies\"\n          }, {\n            subLinks: [],\n            label: \"Event\",\n            url: \"https://teamdagarna.com/events\"\n          }, {\n            subLinks: [],\n            label: \"TEAM-bloggen\",\n            url: \"https://teamdagarna.com/blogposts\"\n          }, // {\n          //   subLinks: [],\n          //   label: \"Mässkarta\",\n          //   url: \"https://teamdagarna.com/masskarta\"\n          // },\n          // {\n          //   subLinks: [],\n          //   label: \"Pusseljakten\",\n          //   url: \"https://teamdagarna.com/pusseljakten\"\n          // },\n          // {\n          //   subLinks: [],\n          //   label: \"Företagsskyltar\",\n          //   url: \"https://teamdagarna.com/foretagsskyltar\"\n          // },\n          // {\n          //   subLinks: [],\n          //   label: \"Sök värd\",\n          //   url: \"https://teamdagarna.com/sokvard\"\n          // },\n          {\n            subLinks: [],\n            label: \"Kontaktsamtal\",\n            url: \"https://teamdagarna.com/interview\"\n          } // {\n          //   subLinks: [],\n          //   label: \"Sök DreamTEAM\",\n          //   url: \"https://teamdagarna.com/sokdreamteam\"\n          // }\n          ],\n          label: \"För Studenter\",\n          isGrouping: true,\n          icon: \"fa-users\"\n        }, {\n          subLinks: [{\n            subLinks: [],\n            label: \"Om TEAM-dagarna\",\n            url: \"https://teamdagarna.com/about\"\n          }, {\n            subLinks: [],\n            label: \"FAQ\",\n            url: \"https://teamdagarna.com/faq\"\n          }, // {\n          //   subLinks: [],\n          //   label: \"Erbjudande\",\n          //   url: \"https://teamdagarna.com/weoffer\"\n          // },\n          // {\n          //   subLinks: [],\n          //   label: \"Hitta hit\",\n          //   url: \"https://teamdagarna.com/find\"\n          // },\n          {\n            subLinks: [],\n            label: \"Företagsanmälan\",\n            url: \"https://teamdagarna.com/companyapplication\"\n          } // {\n          //  subLinks: [],\n          //  label: \"Inloggning gästföretag\",\n          //  url: \"https://teamdagarna.com/companysignin\"\n          // }\n          ],\n          label: \"För företag\",\n          isGrouping: true,\n          icon: \"fa-briefcase\"\n        }, {\n          subLinks: [{\n            subLinks: [],\n            label: \"Kontakt\",\n            url: \"https://teamdagarna.com/dreamteam\"\n          }, {\n            subLinks: [],\n            label: \"Om TEAM-dagarna\",\n            url: \"https://teamdagarna.com/about\"\n          }, {\n            subLinks: [],\n            label: \"Hållbarhet\",\n            url: \"https://teamdagarna.com/hallbarhet\"\n          }, {\n            subLinks: [],\n            label: \"Integritetspolicy\",\n            url: \"https://teamdagarna.com/integritetspolicy\"\n          }],\n          label: \"Om oss\",\n          isGrouping: true,\n          icon: \"fa-question\"\n        }, {\n          subLinks: [],\n          label: \"English info\",\n          url: \"https://teamdagarna.com/about-english\",\n          icon: \"fa-cog\"\n        }, {\n          subLinks: [],\n          label: \"Logga in\",\n          url: \"https://teamdagarna.com/signin\",\n          icon: \"fa-sign-out\"\n        }];\n        var json = JSON.stringify(items2);\n        window.location.href = 'gonative://sidebar/setItems?items=' + encodeURIComponent(json);\n      }\n    }, {\n      key: \"isVerified\",\n      value: function isVerified() {\n        return this.emailIsVerified;\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut() {\n        var _this3 = this;\n\n        this.afAuth.auth.signOut().then(function () {\n          //Checks if request comes from the app. If user signs out the info in the navbar will change in the app.\n          if (navigator.userAgent.indexOf('gonative') > -1) {\n            _this3.loggedOutMenuApp();\n          }\n\n          _this3.router.navigate(['']);\n        });\n      }\n    }, {\n      key: \"getUserID\",\n      value: function getUserID() {\n        return this.afAuth.auth.currentUser.uid;\n      }\n    }, {\n      key: \"getUserEmail\",\n      value: function getUserEmail() {\n        return this.afAuth.auth.currentUser.email;\n      }\n    }, {\n      key: \"resetPassword\",\n      value: function resetPassword(email) {\n        return this.afAuth.auth.sendPasswordResetEmail(email).then(function () {\n          return console.log(\"email sent\");\n        }).catch(function (error) {\n          return console.log(error);\n        });\n      } ///// Role-based Authorization //////\n\n    }, {\n      key: \"canRead\",\n      value: function canRead(user) {\n        var allowed = ['dreamteamPlatinumMember', 'dreamteamMember', 'student'];\n        return this.checkAuthorization(user, allowed);\n      }\n    }, {\n      key: \"canEdit\",\n      value: function canEdit(user) {\n        var allowed = ['dreamteamPlatinumMember', 'dreamteamMember'];\n        return this.checkAuthorization(user, allowed);\n      }\n    }, {\n      key: \"canDelete\",\n      value: function canDelete(user) {\n        var allowed = ['dreamteamPlatinumMember'];\n        return this.checkAuthorization(user, allowed);\n      }\n    }, {\n      key: \"isCompany\",\n      value: function isCompany(user) {\n        var allowed = ['dreamteamPlatinumMember', 'company'];\n        return this.checkAuthorization(user, allowed);\n      } // determines if user has matching role\n\n    }, {\n      key: \"checkAuthorization\",\n      value: function checkAuthorization(user, allowedRoles) {\n        if (!user) return false;\n\n        var _iterator = _createForOfIteratorHelper(allowedRoles),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var role = _step.value;\n\n            if (user.roles[role]) {\n              return true;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return false;\n      }\n    }]);\n\n    return AuthService;\n  }();\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}