{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { escapeHits, TAG_PLACEHOLDER, checkRendering, createDocumentationMessageGenerator, createSendEventForHits, noop, warning } from \"../../lib/utils/index.js\";\nvar withUsage = createDocumentationMessageGenerator({\n  name: 'autocomplete',\n  connector: true\n});\n\nvar connectAutocomplete = function connectAutocomplete(renderFn) {\n  var unmountFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  checkRendering(renderFn, withUsage());\n  return function (widgetParams) {\n    var _ref = widgetParams || {},\n        _ref$escapeHTML = _ref.escapeHTML,\n        escapeHTML = _ref$escapeHTML === void 0 ? true : _ref$escapeHTML;\n\n    process.env.NODE_ENV === 'development' ? warning(!widgetParams.indices, \"\\nThe option `indices` has been removed from the Autocomplete connector.\\n\\nThe indices to target are now inferred from the widgets tree.\\n\".concat(Array.isArray(widgetParams.indices) ? \"\\nAn alternative would be:\\n\\nconst autocomplete = connectAutocomplete(renderer);\\n\\nsearch.addWidgets([\\n  \".concat(widgetParams.indices.map(function (_ref2) {\n      var value = _ref2.value;\n      return \"index({ indexName: '\".concat(value, \"' }),\");\n    }).join('\\n  '), \"\\n  autocomplete()\\n]);\\n\") : '', \"\\n      \")) : void 0;\n    var connectorState = {};\n    return {\n      $$type: 'ais.autocomplete',\n      init: function init(initOptions) {\n        var instantSearchInstance = initOptions.instantSearchInstance;\n        renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(initOptions)), {}, {\n          instantSearchInstance: instantSearchInstance\n        }), true);\n      },\n      render: function render(renderOptions) {\n        var instantSearchInstance = renderOptions.instantSearchInstance;\n        var renderState = this.getWidgetRenderState(renderOptions);\n        renderState.indices.forEach(function (_ref3) {\n          var sendEvent = _ref3.sendEvent,\n              hits = _ref3.hits;\n          sendEvent('view', hits);\n        });\n        renderFn(_objectSpread(_objectSpread({}, renderState), {}, {\n          instantSearchInstance: instantSearchInstance\n        }), false);\n      },\n      getRenderState: function getRenderState(renderState, renderOptions) {\n        return _objectSpread(_objectSpread({}, renderState), {}, {\n          autocomplete: this.getWidgetRenderState(renderOptions)\n        });\n      },\n      getWidgetRenderState: function getWidgetRenderState(_ref4) {\n        var _this = this;\n\n        var helper = _ref4.helper,\n            state = _ref4.state,\n            scopedResults = _ref4.scopedResults,\n            instantSearchInstance = _ref4.instantSearchInstance;\n\n        if (!connectorState.refine) {\n          connectorState.refine = function (query) {\n            helper.setQuery(query).search();\n          };\n        }\n\n        var indices = scopedResults.map(function (scopedResult) {\n          // We need to escape the hits because highlighting\n          // exposes HTML tags to the end-user.\n          scopedResult.results.hits = escapeHTML ? escapeHits(scopedResult.results.hits) : scopedResult.results.hits;\n          var sendEvent = createSendEventForHits({\n            instantSearchInstance: instantSearchInstance,\n            index: scopedResult.results.index,\n            widgetType: _this.$$type\n          });\n          return {\n            indexId: scopedResult.indexId,\n            indexName: scopedResult.results.index,\n            hits: scopedResult.results.hits,\n            results: scopedResult.results,\n            sendEvent: sendEvent\n          };\n        });\n        return {\n          currentRefinement: state.query || '',\n          indices: indices,\n          refine: connectorState.refine,\n          widgetParams: widgetParams\n        };\n      },\n      getWidgetUiState: function getWidgetUiState(uiState, _ref5) {\n        var searchParameters = _ref5.searchParameters;\n        var query = searchParameters.query || '';\n\n        if (query === '' || uiState && uiState.query === query) {\n          return uiState;\n        }\n\n        return _objectSpread(_objectSpread({}, uiState), {}, {\n          query: query\n        });\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(searchParameters, _ref6) {\n        var uiState = _ref6.uiState;\n        var parameters = {\n          query: uiState.query || ''\n        };\n\n        if (!escapeHTML) {\n          return searchParameters.setQueryParameters(parameters);\n        }\n\n        return searchParameters.setQueryParameters(_objectSpread(_objectSpread({}, parameters), TAG_PLACEHOLDER));\n      },\n      dispose: function dispose(_ref7) {\n        var state = _ref7.state;\n        unmountFn();\n        var stateWithoutQuery = state.setQueryParameter('query', undefined);\n\n        if (!escapeHTML) {\n          return stateWithoutQuery;\n        }\n\n        return stateWithoutQuery.setQueryParameters(Object.keys(TAG_PLACEHOLDER).reduce(function (acc, key) {\n          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, undefined));\n        }, {}));\n      }\n    };\n  };\n};\n\nexport default connectAutocomplete;","map":null,"metadata":{},"sourceType":"module"}