{"ast":null,"code":"import _classCallCheck from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { AngularFirestore, AngularFirestoreCollection } from 'angularfire2/firestore';\nimport { AngularFireStorage } from 'angularfire2/storage';\nimport { Observable } from 'rxjs';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport * as _ from 'lodash';\nimport { AuthService } from '../../services/auth.service';\nimport { map } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/auth.service\";\nimport * as i2 from \"angularfire2/storage\";\nimport * as i3 from \"angularfire2/firestore\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/router\";\nexport var InterviewComponent = /*#__PURE__*/(function () {\n  var InterviewComponent = /*#__PURE__*/function () {\n    function InterviewComponent(auth, storage, db, fb, afs, route, router) {\n      var _this = this;\n\n      _classCallCheck(this, InterviewComponent);\n\n      this.auth = auth;\n      this.storage = storage;\n      this.db = db;\n      this.fb = fb;\n      this.afs = afs;\n      this.route = route;\n      this.router = router;\n      this.loading = false;\n      this.success = false;\n      this.notsuccess = false;\n      this.clpath = null;\n      this.cluploaded = false;\n      this.clerror = false;\n      this.cvpath = null;\n      this.cvuploaded = false;\n      this.cverror = false;\n      this.gradespath = null;\n      this.gradesuploaded = false;\n      this.gradeserror = false;\n      this.auth.user$.subscribe(function (user) {\n        _this.user = user;\n\n        _this.setValues();\n\n        _this.getInterviews().subscribe(function (interviews) {\n          _this.applied = interviews;\n          _this.applicationsMade = _.size(interviews);\n          _this.appliedOpen = _.find(interviews, function (o) {\n            return o.companyname == 'Öppen anmälan kontaktsamtal';\n          });\n\n          if (_this.appliedOpen) {\n            _this.applicationsMade = _this.applicationsMade - 1;\n          } // console.log(this.applicationsMade);\n\n        });\n      });\n      this.interviewCollection = afs.collection('interviews');\n      this.companiesCollection = afs.collection('companies');\n      this.getCompanies().subscribe(function (companies) {\n        _this.companies = _.filter(companies, function (company) {\n          if (company.offersinterview) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n        _this.companies = _.orderBy(_this.companies, ['name']);\n\n        _this.getCompany(_this.preselected);\n      });\n    }\n\n    _createClass(InterviewComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this2 = this;\n\n        this.route.queryParams.subscribe(function (params) {\n          _this2.preselected = params['preselected'];\n        });\n\n        if (!this.preselected) {\n          this.preselected = -1;\n        }\n\n        this.interviewForm = this.fb.group({\n          'selectedCompany': [this.preselected, [Validators.required]],\n          'phoneNumber': ['', [Validators.pattern('[0-9]{9}$'), Validators.required]]\n        });\n      }\n    }, {\n      key: \"selectedCompany\",\n      get: function get() {\n        return this.interviewForm.get('selectedCompany');\n      }\n    }, {\n      key: \"phoneNumber\",\n      get: function get() {\n        return this.interviewForm.get('phoneNumber');\n      }\n    }, {\n      key: \"setValues\",\n      value: function setValues() {\n        this.interviewForm.patchValue(this.user);\n      }\n    }, {\n      key: \"getCompanies\",\n      value: function getCompanies() {\n        return this.afs.collection('companies').snapshotChanges().pipe(map(function (actions) {\n          return actions.map(function (a) {\n            var data = a.payload.doc.data();\n            var id = a.payload.doc.id;\n            return Object.assign({\n              id: id\n            }, data);\n          });\n        }));\n      }\n    }, {\n      key: \"getCompany\",\n      value: function getCompany(company) {\n        this.company = _.find(this.companies, ['id', company]);\n      }\n    }, {\n      key: \"getInterviews\",\n      value: function getInterviews() {\n        var _this3 = this;\n\n        return this.afs.collection('interviews', function (ref) {\n          return ref.where('applicant', '==', _this3.user.uid);\n        }).valueChanges();\n      }\n    }, {\n      key: \"hasApplied\",\n      value: function hasApplied(company) {\n        if (_.find(this.applied, function (o) {\n          return o.company == company;\n        }) !== undefined) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"submit\",\n      value: function submit() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var tags, formValue, phone, newInterview, tags2, index, _newInterview;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (navigator.userAgent.indexOf('gonative') > -1) {\n                    tags = {\n                      appliedInterview: 'yes'\n                    };\n                    window.location.href = 'gonative://onesignal/tags/set?tags=' + encodeURIComponent(JSON.stringify(tags));\n                  }\n\n                  formValue = this.interviewForm.value;\n                  phone = {\n                    phoneNumber: formValue.phoneNumber\n                  };\n                  this.auth.updateUser(this.user, phone);\n                  this.loading = true;\n                  newInterview = {\n                    applicant: this.user.uid,\n                    company: this.company.id,\n                    companyname: this.company.name,\n                    firstname: this.user.firstname,\n                    lastname: this.user.lastname,\n                    liuid: this.user.liuid,\n                    phoneNumber: formValue.phoneNumber,\n                    program: this.user.program,\n                    year: this.user.year,\n                    engineerbachelor: this.user.engineerbachelor,\n                    engineermaster: this.user.engineermaster,\n                    nekorfek: this.user.nekorfek,\n                    filfakspecialization: this.user.filfakspecialization,\n                    backup: false,\n                    notselected: false,\n                    selected: false,\n                    pending: true,\n                    studentaccepted: false,\n                    studentnotanswered: true,\n                    studentdeclined: false,\n                    resumepath: this.cvpath,\n                    coverletterpath: this.clpath,\n                    gradespath: this.gradespath\n                  };\n                  _context.prev = 6;\n                  _context.next = 9;\n                  return this.afs.collection('interviews').add(newInterview);\n\n                case 9:\n                  this.success = true;\n                  _context.next = 16;\n                  break;\n\n                case 12:\n                  _context.prev = 12;\n                  _context.t0 = _context[\"catch\"](6);\n                  console.log(_context.t0);\n                  this.notsuccess = true;\n\n                case 16:\n                  if (!(this.company.name == 'Öppen anmälan kontaktsamtal')) {\n                    _context.next = 34;\n                    break;\n                  }\n\n                  if (navigator.userAgent.indexOf('gonative') > -1) {\n                    tags2 = {\n                      appliedOpenInterview: 'yes'\n                    };\n                    window.location.href = 'gonative://onesignal/tags/set?tags=' + encodeURIComponent(JSON.stringify(tags2));\n                  }\n\n                  index = 0;\n\n                case 19:\n                  if (!(index < this.companies.length)) {\n                    _context.next = 34;\n                    break;\n                  }\n\n                  if (!this.companies[index].seeopenapplicants) {\n                    _context.next = 31;\n                    break;\n                  }\n\n                  _newInterview = {\n                    applicant: this.user.uid,\n                    company: this.companies[index].id,\n                    companyname: this.companies[index].name,\n                    firstname: this.user.firstname,\n                    lastname: this.user.lastname,\n                    liuid: this.user.liuid,\n                    phoneNumber: formValue.phoneNumber,\n                    program: this.user.program,\n                    year: this.user.year,\n                    engineerbachelor: this.user.engineerbachelor,\n                    engineermaster: this.user.engineermaster,\n                    nekorfek: this.user.nekorfek,\n                    filfakspecialization: this.user.filfakspecialization,\n                    backup: false,\n                    notselected: false,\n                    selected: false,\n                    pending: true,\n                    studentaccepted: false,\n                    studentnotanswered: true,\n                    studentdeclined: false,\n                    resumepath: this.cvpath,\n                    coverletterpath: this.clpath,\n                    gradespath: this.gradespath\n                  };\n                  _context.prev = 22;\n                  _context.next = 25;\n                  return this.afs.collection('openinterviews').add(_newInterview);\n\n                case 25:\n                  this.success = true;\n                  _context.next = 31;\n                  break;\n\n                case 28:\n                  _context.prev = 28;\n                  _context.t1 = _context[\"catch\"](22);\n                  this.notsuccess = true;\n\n                case 31:\n                  ++index;\n                  _context.next = 19;\n                  break;\n\n                case 34:\n                  this.loading = false;\n\n                case 35:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this, [[6, 12], [22, 28]]);\n        }));\n      }\n    }, {\n      key: \"okToSubmit\",\n      value: function okToSubmit() {\n        if (this.company.reqcl && (!this.cluploaded || this.clerror) || this.company.reqresume && (!this.cvuploaded || this.cverror) || this.company.reqgrades && (!this.gradesuploaded || this.gradeserror) || !this.interviewForm.valid) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n    }, {\n      key: \"applyOpenOkToSubmit\",\n      value: function applyOpenOkToSubmit() {\n        if (this.company.name == 'Öppen anmälan kontaktsamtal' && this.interviewForm.valid) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"startUploadCoverLetter\",\n      value: function startUploadCoverLetter(event) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  this.clpath = \"coverletters/\".concat(this.user.liuid, \"_\").concat(new Date().getTime());\n                  this.clfile = event.item(0);\n\n                  if (!(this.clfile.type !== 'application/pdf')) {\n                    _context2.next = 6;\n                    break;\n                  }\n\n                  this.cluploaded = false;\n                  this.clerror = true;\n                  return _context2.abrupt(\"return\");\n\n                case 6:\n                  try {\n                    this.cltask = this.storage.upload(this.clpath, this.clfile);\n                    this.clerror = false;\n                    this.cluploaded = true;\n                  } catch (err) {\n                    console.error(err);\n                    this.cluploaded = false;\n                    this.clerror = true;\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }, {\n      key: \"startUploadResume\",\n      value: function startUploadResume(event) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  this.cvpath = \"resumes/\".concat(this.user.liuid, \"_\").concat(new Date().getTime());\n                  this.cvfile = event.item(0);\n\n                  if (!(this.cvfile.type !== 'application/pdf')) {\n                    _context3.next = 6;\n                    break;\n                  }\n\n                  this.cvuploaded = false;\n                  this.cverror = true;\n                  return _context3.abrupt(\"return\");\n\n                case 6:\n                  try {\n                    this.cvtask = this.storage.upload(this.cvpath, this.cvfile);\n                    this.cverror = false;\n                    this.cvuploaded = true;\n                  } catch (err) {\n                    console.error(err);\n                    this.cvuploaded = false;\n                    this.cverror = true;\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      }\n    }, {\n      key: \"startUploadGrades\",\n      value: function startUploadGrades(event) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  this.gradespath = \"grades/\".concat(this.user.liuid, \"_\").concat(new Date().getTime());\n                  this.gradesfile = event.item(0);\n\n                  if (!(this.gradesfile.type !== 'application/pdf')) {\n                    _context4.next = 6;\n                    break;\n                  }\n\n                  this.gradesuploaded = false;\n                  this.gradeserror = true;\n                  return _context4.abrupt(\"return\");\n\n                case 6:\n                  try {\n                    this.gradestask = this.storage.upload(this.gradespath, this.gradesfile);\n                    this.gradeserror = false;\n                    this.gradesuploaded = true;\n                  } catch (err) {\n                    console.error(err);\n                    this.gradesuploaded = false;\n                    this.gradeserror = true;\n                  }\n\n                case 7:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n      }\n    }, {\n      key: \"refresh\",\n      value: function refresh() {\n        var _this4 = this;\n\n        this.router.navigateByUrl('/', {\n          skipLocationChange: true\n        }).then(function () {\n          return _this4.router.navigate(['interview']);\n        });\n      }\n    }]);\n\n    return InterviewComponent;\n  }();\n\n  InterviewComponent.ɵfac = function InterviewComponent_Factory(t) {\n    return new (t || InterviewComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.AngularFireStorage), i0.ɵɵdirectiveInject(i3.AngularFirestore), i0.ɵɵdirectiveInject(i4.FormBuilder), i0.ɵɵdirectiveInject(i3.AngularFirestore), i0.ɵɵdirectiveInject(i5.ActivatedRoute), i0.ɵɵdirectiveInject(i5.Router));\n  };\n\n  InterviewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InterviewComponent,\n    selectors: [[\"app-interview\"]],\n    decls: 22,\n    vars: 0,\n    consts: [[1, \"hero\", \"is-primary\", \"is-bold\"], [1, \"hero-body\"], [1, \"container\"], [1, \"columns\", \"is-vcentered\"], [1, \"column\", \"is-two-thirds\"], [1, \"title\"], [1, \"subtitle\"], [1, \"section\"], [1, \"title\", \"is-5\"], [\"href\", \"https://fair.teamdagarna.com/sv/event/5267\", 1, \"button\", \"is-primary\", 2, \"margin\", \"4px 4px 8px 0\"]],\n    template: function InterviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h1\", 5);\n        i0.ɵɵtext(6, \" Kontaktsamtal \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"h2\", 6);\n        i0.ɵɵtext(8, \"I \\xE5r kommer TEAM-dagarna att \\xE4ga rum p\\xE5 den digitala plattformen Graduateland d\\xE4r \\xE4ven kontaktsamtalen kommer att ta plats.\");\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelementStart(9, \"section\", 7)(10, \"div\", 2)(11, \"h1\", 8);\n        i0.ɵɵtext(12, \"F\\xF6r att boka in dig p\\xE5 ett kontaktsamtal g\\xF6r du som f\\xF6ljande: \");\n        i0.ɵɵelement(13, \"br\")(14, \"br\");\n        i0.ɵɵtext(15, \" 1. G\\xE5 in via l\\xE4nken nedan och klicka dig in p\\xE5 de f\\xF6retag du \\xE4r intresserad av att ha kontaktsamtal med.\");\n        i0.ɵɵelement(16, \"br\");\n        i0.ɵɵtext(17, \" 2. G\\xE5 in p\\xE5 deras respektive monter och skrollar ner till \\u201Dkontaktsamtal\\u201D. D\\xE4r hittar du olika slottider d\\xE4r f\\xF6retaget \\xE4r tillg\\xE4nglig p\\xE5. \");\n        i0.ɵɵelement(18, \"br\");\n        i0.ɵɵtext(19, \" 3. V\\xE4lj den tid som passar in i ditt schema och d\\xE4rmed ans\\xF6ker du om att f\\xE5 ha kontaktsamtal med f\\xF6retaget. Det \\xE4r sedan upp f\\xF6retaget att v\\xE4lja vilka studenter som f\\xE5r denna m\\xF6jlighet. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"a\", 9);\n        i0.ɵɵtext(21, \" Kontaktsamtalsanm\\xE4lan\");\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\".upload[_ngcontent-%COMP%]{width:100%}\"]\n  });\n  return InterviewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}