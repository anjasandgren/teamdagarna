{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { checkRendering, createDocumentationMessageGenerator, createConcurrentSafePromise, addQueryID, debounce, addAbsolutePosition, noop, escapeHits } from \"../../lib/utils/index.js\";\n\nfunction hasFindAnswersMethod(answersIndex) {\n  return typeof answersIndex.findAnswers === 'function';\n}\n\nvar withUsage = createDocumentationMessageGenerator({\n  name: 'answers',\n  connector: true\n});\n\nvar connectAnswers = function connectAnswers(renderFn) {\n  var unmountFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n  checkRendering(renderFn, withUsage());\n  return function (widgetParams) {\n    var _ref = widgetParams || {},\n        queryLanguages = _ref.queryLanguages,\n        attributesForPrediction = _ref.attributesForPrediction,\n        _ref$nbHits = _ref.nbHits,\n        nbHits = _ref$nbHits === void 0 ? 1 : _ref$nbHits,\n        _ref$renderDebounceTi = _ref.renderDebounceTime,\n        renderDebounceTime = _ref$renderDebounceTi === void 0 ? 100 : _ref$renderDebounceTi,\n        _ref$searchDebounceTi = _ref.searchDebounceTime,\n        searchDebounceTime = _ref$searchDebounceTi === void 0 ? 100 : _ref$searchDebounceTi,\n        _ref$escapeHTML = _ref.escapeHTML,\n        escapeHTML = _ref$escapeHTML === void 0 ? true : _ref$escapeHTML,\n        _ref$extraParameters = _ref.extraParameters,\n        extraParameters = _ref$extraParameters === void 0 ? {} : _ref$extraParameters; // @ts-expect-error checking for the wrong value\n\n\n    if (!queryLanguages || queryLanguages.length === 0) {\n      throw new Error(withUsage('The `queryLanguages` expects an array of strings.'));\n    }\n\n    var runConcurrentSafePromise = createConcurrentSafePromise();\n    var lastHits = [];\n    var isLoading = false;\n    var debouncedRender = debounce(renderFn, renderDebounceTime); // this does not directly use DebouncedFunction<findAnswers>, since then the generic will disappear\n\n    var debouncedRefine;\n    return {\n      $$type: 'ais.answers',\n      init: function init(initOptions) {\n        var state = initOptions.state,\n            instantSearchInstance = initOptions.instantSearchInstance;\n        var answersIndex = instantSearchInstance.client.initIndex(state.index);\n\n        if (!hasFindAnswersMethod(answersIndex)) {\n          throw new Error(withUsage('`algoliasearch` >= 4.8.0 required.'));\n        }\n\n        debouncedRefine = debounce(answersIndex.findAnswers, searchDebounceTime);\n        renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(initOptions)), {}, {\n          instantSearchInstance: initOptions.instantSearchInstance\n        }), true);\n      },\n      render: function render(renderOptions) {\n        var _this = this;\n\n        var query = renderOptions.state.query;\n\n        if (!query) {\n          // renders nothing with empty query\n          lastHits = [];\n          isLoading = false;\n          renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(renderOptions)), {}, {\n            instantSearchInstance: renderOptions.instantSearchInstance\n          }), false);\n          return;\n        } // render the loader\n\n\n        lastHits = [];\n        isLoading = true;\n        renderFn(_objectSpread(_objectSpread({}, this.getWidgetRenderState(renderOptions)), {}, {\n          instantSearchInstance: renderOptions.instantSearchInstance\n        }), false); // call /answers API\n\n        runConcurrentSafePromise(debouncedRefine(query, queryLanguages, _objectSpread(_objectSpread({}, extraParameters), {}, {\n          nbHits: nbHits,\n          attributesForPrediction: attributesForPrediction\n        }))).then(function (result) {\n          if (!result) {\n            // It's undefined when it's debounced.\n            return;\n          }\n\n          if (escapeHTML && result.hits.length > 0) {\n            result.hits = escapeHits(result.hits);\n          }\n\n          var hitsWithAbsolutePosition = addAbsolutePosition(result.hits, 0, nbHits);\n          var hitsWithAbsolutePositionAndQueryID = addQueryID(hitsWithAbsolutePosition, result.queryID);\n          lastHits = hitsWithAbsolutePositionAndQueryID;\n          isLoading = false;\n          debouncedRender(_objectSpread(_objectSpread({}, _this.getWidgetRenderState(renderOptions)), {}, {\n            instantSearchInstance: renderOptions.instantSearchInstance\n          }), false);\n        });\n      },\n      getRenderState: function getRenderState(renderState, renderOptions) {\n        return _objectSpread(_objectSpread({}, renderState), {}, {\n          answers: this.getWidgetRenderState(renderOptions)\n        });\n      },\n      getWidgetRenderState: function getWidgetRenderState() {\n        return {\n          hits: lastHits,\n          isLoading: isLoading,\n          widgetParams: widgetParams\n        };\n      },\n      dispose: function dispose(_ref2) {\n        var state = _ref2.state;\n        unmountFn();\n        return state;\n      },\n      getWidgetSearchParameters: function getWidgetSearchParameters(state) {\n        return state;\n      }\n    };\n  };\n};\n\nexport default connectAnswers;","map":null,"metadata":{},"sourceType":"module"}