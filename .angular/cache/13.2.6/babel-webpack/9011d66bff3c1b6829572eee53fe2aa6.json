{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { DateTimeAdapter, OWL_DATE_TIME_LOCALE } from './date-time-adapter.class';\nvar DEFAULT_MONTH_NAMES = {\n  'long': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\nvar DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\nvar ɵ0 = function ɵ0(i) {\n  return String(i + 1);\n};\n\nvar DEFAULT_DATE_NAMES = range(31, ɵ0);\nvar SUPPORTS_INTL_API = typeof Intl !== 'undefined';\nvar ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\nfunction range(length, valueFunction) {\n  var valuesArray = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n\nvar NativeDateTimeAdapter = function (_super) {\n  __extends(NativeDateTimeAdapter, _super);\n\n  function NativeDateTimeAdapter(owlDateTimeLocale, platform) {\n    var _this = _super.call(this) || this;\n\n    _this.owlDateTimeLocale = owlDateTimeLocale;\n\n    _super.prototype.setLocale.call(_this, owlDateTimeLocale);\n\n    _this.useUtcForDisplay = !platform.TRIDENT;\n    _this._clampDate = platform.TRIDENT || platform.EDGE;\n    return _this;\n  }\n\n  NativeDateTimeAdapter.prototype.getYear = function (date) {\n    return date.getFullYear();\n  };\n\n  NativeDateTimeAdapter.prototype.getMonth = function (date) {\n    return date.getMonth();\n  };\n\n  NativeDateTimeAdapter.prototype.getDay = function (date) {\n    return date.getDay();\n  };\n\n  NativeDateTimeAdapter.prototype.getDate = function (date) {\n    return date.getDate();\n  };\n\n  NativeDateTimeAdapter.prototype.getHours = function (date) {\n    return date.getHours();\n  };\n\n  NativeDateTimeAdapter.prototype.getMinutes = function (date) {\n    return date.getMinutes();\n  };\n\n  NativeDateTimeAdapter.prototype.getSeconds = function (date) {\n    return date.getSeconds();\n  };\n\n  NativeDateTimeAdapter.prototype.getTime = function (date) {\n    return date.getTime();\n  };\n\n  NativeDateTimeAdapter.prototype.getNumDaysInMonth = function (date) {\n    var lastDateOfMonth = this.createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0);\n    return this.getDate(lastDateOfMonth);\n  };\n\n  NativeDateTimeAdapter.prototype.differenceInCalendarDays = function (dateLeft, dateRight) {\n    if (this.isValid(dateLeft) && this.isValid(dateRight)) {\n      var dateLeftStartOfDay = this.createDate(this.getYear(dateLeft), this.getMonth(dateLeft), this.getDate(dateLeft));\n      var dateRightStartOfDay = this.createDate(this.getYear(dateRight), this.getMonth(dateRight), this.getDate(dateRight));\n      var timeStampLeft = this.getTime(dateLeftStartOfDay) - dateLeftStartOfDay.getTimezoneOffset() * this.milliseondsInMinute;\n      var timeStampRight = this.getTime(dateRightStartOfDay) - dateRightStartOfDay.getTimezoneOffset() * this.milliseondsInMinute;\n      return Math.round((timeStampLeft - timeStampRight) / this.millisecondsInDay);\n    } else {\n      return null;\n    }\n  };\n\n  NativeDateTimeAdapter.prototype.getYearName = function (date) {\n    if (SUPPORTS_INTL_API) {\n      var dtf = new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        timeZone: 'utc'\n      });\n      return this.stripDirectionalityCharacters(this._format(dtf, date));\n    }\n\n    return String(this.getYear(date));\n  };\n\n  NativeDateTimeAdapter.prototype.getMonthNames = function (style) {\n    var _this = this;\n\n    if (SUPPORTS_INTL_API) {\n      var dtf_1 = new Intl.DateTimeFormat(this.locale, {\n        month: style,\n        timeZone: 'utc'\n      });\n      return range(12, function (i) {\n        return _this.stripDirectionalityCharacters(_this._format(dtf_1, new Date(2017, i, 1)));\n      });\n    }\n\n    return DEFAULT_MONTH_NAMES[style];\n  };\n\n  NativeDateTimeAdapter.prototype.getDayOfWeekNames = function (style) {\n    var _this = this;\n\n    if (SUPPORTS_INTL_API) {\n      var dtf_2 = new Intl.DateTimeFormat(this.locale, {\n        weekday: style,\n        timeZone: 'utc'\n      });\n      return range(7, function (i) {\n        return _this.stripDirectionalityCharacters(_this._format(dtf_2, new Date(2017, 0, i + 1)));\n      });\n    }\n\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  };\n\n  NativeDateTimeAdapter.prototype.getDateNames = function () {\n    var _this = this;\n\n    if (SUPPORTS_INTL_API) {\n      var dtf_3 = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc'\n      });\n      return range(31, function (i) {\n        return _this.stripDirectionalityCharacters(_this._format(dtf_3, new Date(2017, 0, i + 1)));\n      });\n    }\n\n    return DEFAULT_DATE_NAMES;\n  };\n\n  NativeDateTimeAdapter.prototype.toIso8601 = function (date) {\n    return date.toISOString();\n  };\n\n  NativeDateTimeAdapter.prototype.isEqual = function (dateLeft, dateRight) {\n    if (this.isValid(dateLeft) && this.isValid(dateRight)) {\n      return dateLeft.getTime() === dateRight.getTime();\n    } else {\n      return false;\n    }\n  };\n\n  NativeDateTimeAdapter.prototype.isSameDay = function (dateLeft, dateRight) {\n    if (this.isValid(dateLeft) && this.isValid(dateRight)) {\n      var dateLeftStartOfDay = this.clone(dateLeft);\n      var dateRightStartOfDay = this.clone(dateRight);\n      dateLeftStartOfDay.setHours(0, 0, 0, 0);\n      dateRightStartOfDay.setHours(0, 0, 0, 0);\n      return dateLeftStartOfDay.getTime() === dateRightStartOfDay.getTime();\n    } else {\n      return false;\n    }\n  };\n\n  NativeDateTimeAdapter.prototype.isValid = function (date) {\n    return date && !isNaN(date.getTime());\n  };\n\n  NativeDateTimeAdapter.prototype.invalid = function () {\n    return new Date(NaN);\n  };\n\n  NativeDateTimeAdapter.prototype.isDateInstance = function (obj) {\n    return obj instanceof Date;\n  };\n\n  NativeDateTimeAdapter.prototype.addCalendarYears = function (date, amount) {\n    return this.addCalendarMonths(date, amount * 12);\n  };\n\n  NativeDateTimeAdapter.prototype.addCalendarMonths = function (date, amount) {\n    var result = this.clone(date);\n    amount = Number(amount);\n    var desiredMonth = result.getMonth() + amount;\n    var dateWithDesiredMonth = new Date(0);\n    dateWithDesiredMonth.setFullYear(result.getFullYear(), desiredMonth, 1);\n    dateWithDesiredMonth.setHours(0, 0, 0, 0);\n    var daysInMonth = this.getNumDaysInMonth(dateWithDesiredMonth);\n    result.setMonth(desiredMonth, Math.min(daysInMonth, result.getDate()));\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.addCalendarDays = function (date, amount) {\n    var result = this.clone(date);\n    amount = Number(amount);\n    result.setDate(result.getDate() + amount);\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.setHours = function (date, amount) {\n    var result = this.clone(date);\n    result.setHours(amount);\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.setMinutes = function (date, amount) {\n    var result = this.clone(date);\n    result.setMinutes(amount);\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.setSeconds = function (date, amount) {\n    var result = this.clone(date);\n    result.setSeconds(amount);\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.createDate = function (year, month, date, hours, minutes, seconds) {\n    if (hours === void 0) {\n      hours = 0;\n    }\n\n    if (minutes === void 0) {\n      minutes = 0;\n    }\n\n    if (seconds === void 0) {\n      seconds = 0;\n    }\n\n    if (month < 0 || month > 11) {\n      throw Error(\"Invalid month index \\\"\" + month + \"\\\". Month index has to be between 0 and 11.\");\n    }\n\n    if (date < 1) {\n      throw Error(\"Invalid date \\\"\" + date + \"\\\". Date has to be greater than 0.\");\n    }\n\n    if (hours < 0 || hours > 23) {\n      throw Error(\"Invalid hours \\\"\" + hours + \"\\\". Hours has to be between 0 and 23.\");\n    }\n\n    if (minutes < 0 || minutes > 59) {\n      throw Error(\"Invalid minutes \\\"\" + minutes + \"\\\". Minutes has to between 0 and 59.\");\n    }\n\n    if (seconds < 0 || seconds > 59) {\n      throw Error(\"Invalid seconds \\\"\" + seconds + \"\\\". Seconds has to be between 0 and 59.\");\n    }\n\n    var result = this.createDateWithOverflow(year, month, date, hours, minutes, seconds);\n\n    if (result.getMonth() !== month) {\n      throw Error(\"Invalid date \\\"\" + date + \"\\\" for month with index \\\"\" + month + \"\\\".\");\n    }\n\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.clone = function (date) {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date), this.getHours(date), this.getMinutes(date), this.getSeconds(date));\n  };\n\n  NativeDateTimeAdapter.prototype.now = function () {\n    return new Date();\n  };\n\n  NativeDateTimeAdapter.prototype.format = function (date, displayFormat) {\n    if (!this.isValid(date)) {\n      throw Error('JSNativeDate: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = __assign({}, displayFormat, {\n        timeZone: 'utc'\n      });\n      var dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this.stripDirectionalityCharacters(this._format(dtf, date));\n    }\n\n    return this.stripDirectionalityCharacters(date.toDateString());\n  };\n\n  NativeDateTimeAdapter.prototype.parse = function (value, parseFormat) {\n    if (typeof value === 'number') {\n      return new Date(value);\n    }\n\n    return value ? new Date(Date.parse(value)) : null;\n  };\n\n  NativeDateTimeAdapter.prototype.deserialize = function (value) {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n\n      if (ISO_8601_REGEX.test(value)) {\n        var date = new Date(value);\n\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n\n    return _super.prototype.deserialize.call(this, value);\n  };\n\n  NativeDateTimeAdapter.prototype.createDateWithOverflow = function (year, month, date, hours, minutes, seconds) {\n    if (hours === void 0) {\n      hours = 0;\n    }\n\n    if (minutes === void 0) {\n      minutes = 0;\n    }\n\n    if (seconds === void 0) {\n      seconds = 0;\n    }\n\n    var result = new Date(year, month, date, hours, minutes, seconds);\n\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n\n    return result;\n  };\n\n  NativeDateTimeAdapter.prototype.stripDirectionalityCharacters = function (str) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  };\n\n  NativeDateTimeAdapter.prototype._format = function (dtf, date) {\n    var d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  };\n\n  NativeDateTimeAdapter = __decorate([__param(0, Optional()), __param(0, Inject(OWL_DATE_TIME_LOCALE)), __metadata(\"design:paramtypes\", [String, Platform])], NativeDateTimeAdapter);\n\n  NativeDateTimeAdapter.ɵfac = function NativeDateTimeAdapter_Factory(t) {\n    return new (t || NativeDateTimeAdapter)(ɵngcc0.ɵɵinject(OWL_DATE_TIME_LOCALE, 8), ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n  };\n\n  NativeDateTimeAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NativeDateTimeAdapter,\n    factory: function factory(t) {\n      return NativeDateTimeAdapter.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return NativeDateTimeAdapter;\n}(DateTimeAdapter);\n\nexport { NativeDateTimeAdapter };\nexport { ɵ0 }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}