{"ast":null,"code":"import find from \"./find.js\";\nimport unescapeRefinement from \"./unescapeRefinement.js\";\n\nfunction getRefinement(state, type, attribute, name) {\n  var resultsFacets = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var res = {\n    type: type,\n    attribute: attribute,\n    name: name\n  };\n  var facet = find(resultsFacets, function (resultsFacet) {\n    return resultsFacet.name === attribute;\n  });\n  var count;\n\n  if (type === 'hierarchical') {\n    (function () {\n      var facetDeclaration = state.getHierarchicalFacetByName(attribute);\n      var nameParts = name.split(facetDeclaration.separator);\n\n      var getFacetRefinement = function getFacetRefinement(facetData) {\n        return function (refinementKey) {\n          return facetData[refinementKey];\n        };\n      };\n\n      var _loop = function _loop(i) {\n        facet = facet && facet.data && find(Object.keys(facet.data).map(getFacetRefinement(facet.data)), function (refinement) {\n          return refinement.name === nameParts[i];\n        });\n      };\n\n      for (var i = 0; facet !== undefined && i < nameParts.length; ++i) {\n        _loop(i);\n      }\n\n      count = facet && facet.count;\n    })();\n  } else {\n    count = facet && facet.data && facet.data[res.name];\n  }\n\n  var exhaustive = facet && facet.exhaustive;\n\n  if (count !== undefined) {\n    res.count = count;\n  }\n\n  if (exhaustive !== undefined) {\n    res.exhaustive = exhaustive;\n  }\n\n  return res;\n}\n\nfunction getRefinements(results, state) {\n  var includesQuery = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var refinements = [];\n  var _state$facetsRefineme = state.facetsRefinements,\n      facetsRefinements = _state$facetsRefineme === void 0 ? {} : _state$facetsRefineme,\n      _state$facetsExcludes = state.facetsExcludes,\n      facetsExcludes = _state$facetsExcludes === void 0 ? {} : _state$facetsExcludes,\n      _state$disjunctiveFac = state.disjunctiveFacetsRefinements,\n      disjunctiveFacetsRefinements = _state$disjunctiveFac === void 0 ? {} : _state$disjunctiveFac,\n      _state$hierarchicalFa = state.hierarchicalFacetsRefinements,\n      hierarchicalFacetsRefinements = _state$hierarchicalFa === void 0 ? {} : _state$hierarchicalFa,\n      _state$numericRefinem = state.numericRefinements,\n      numericRefinements = _state$numericRefinem === void 0 ? {} : _state$numericRefinem,\n      _state$tagRefinements = state.tagRefinements,\n      tagRefinements = _state$tagRefinements === void 0 ? [] : _state$tagRefinements;\n  Object.keys(facetsRefinements).forEach(function (attribute) {\n    var refinementNames = facetsRefinements[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push(getRefinement(state, 'facet', attribute, refinementName, results.facets));\n    });\n  });\n  Object.keys(facetsExcludes).forEach(function (attribute) {\n    var refinementNames = facetsExcludes[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push({\n        type: 'exclude',\n        attribute: attribute,\n        name: refinementName,\n        exclude: true\n      });\n    });\n  });\n  Object.keys(disjunctiveFacetsRefinements).forEach(function (attribute) {\n    var refinementNames = disjunctiveFacetsRefinements[attribute];\n    refinementNames.forEach(function (refinementName) {\n      refinements.push(getRefinement(state, 'disjunctive', attribute, // We unescape any disjunctive refined values with `unescapeRefinement` because\n      // they can be escaped on negative numeric values with `escapeRefinement`.\n      unescapeRefinement(refinementName), results.disjunctiveFacets));\n    });\n  });\n  Object.keys(hierarchicalFacetsRefinements).forEach(function (attribute) {\n    var refinementNames = hierarchicalFacetsRefinements[attribute];\n    refinementNames.forEach(function (refinement) {\n      refinements.push(getRefinement(state, 'hierarchical', attribute, refinement, results.hierarchicalFacets));\n    });\n  });\n  Object.keys(numericRefinements).forEach(function (attribute) {\n    var operators = numericRefinements[attribute];\n    Object.keys(operators).forEach(function (operatorOriginal) {\n      var operator = operatorOriginal;\n      var valueOrValues = operators[operator];\n      var refinementNames = Array.isArray(valueOrValues) ? valueOrValues : [valueOrValues];\n      refinementNames.forEach(function (refinementName) {\n        refinements.push({\n          type: 'numeric',\n          attribute: attribute,\n          name: \"\".concat(refinementName),\n          numericValue: refinementName,\n          operator: operator\n        });\n      });\n    });\n  });\n  tagRefinements.forEach(function (refinementName) {\n    refinements.push({\n      type: 'tag',\n      attribute: '_tags',\n      name: refinementName\n    });\n  });\n\n  if (includesQuery && state.query && state.query.trim()) {\n    refinements.push({\n      attribute: 'query',\n      type: 'query',\n      name: state.query,\n      query: state.query\n    });\n  }\n\n  return refinements;\n}\n\nexport default getRefinements;","map":null,"metadata":{},"sourceType":"module"}