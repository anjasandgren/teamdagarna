{"ast":null,"code":"import _inherits from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/frida/teamdagarna/node_modules/@babel/runtime/regenerator/index.js\";\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, isPlatformServer, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject, EventEmitter, SecurityContext, PLATFORM_ID, Directive, Input, Output, ElementRef, ChangeDetectorRef, Renderer2, NgZone, forwardRef, Component, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i1 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { defer, Subscription, fromEvent } from 'rxjs';\nimport { shareReplay, debounceTime } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { __awaiter } from 'tslib';\nvar _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\nvar _c1 = [\"[quill-editor-toolbar]\"];\nvar defaultModules = {\n  toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n    header: 1\n  }, {\n    header: 2\n  }], [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }], [{\n    script: 'sub'\n  }, {\n    script: 'super'\n  }], [{\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }], [{\n    direction: 'rtl'\n  }], [{\n    size: ['small', false, 'large', 'huge']\n  }], [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [{\n    color: []\n  }, {\n    background: []\n  }], [{\n    font: []\n  }], [{\n    align: []\n  }], ['clean'], ['link', 'image', 'video'] // link and image, video\n  ]\n};\n\nvar getFormat = function getFormat(format, configFormat) {\n  var passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\n\nvar QUILL_CONFIG_TOKEN = new InjectionToken('config', {\n  providedIn: 'root',\n  factory: function factory() {\n    return {\n      modules: defaultModules\n    };\n  }\n});\nvar QuillService = /*#__PURE__*/(function () {\n  var QuillService = /*#__PURE__*/function () {\n    function QuillService(injector, config) {\n      var _this = this;\n\n      _classCallCheck(this, QuillService);\n\n      this.config = config;\n      this.quill$ = defer(function () {\n        return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _this2 = this;\n\n          var _a, _b, maybePatchedAddEventListener, quillImport;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (this.Quill) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  // Quill adds events listeners on import https://github.com/quilljs/quill/blob/develop/core/emitter.js#L8\n                  // We'd want to use the unpatched `addEventListener` method to have all event callbacks to be run outside of zone.\n                  // We don't know yet if the `zone.js` is used or not, just save the value to restore it back further.\n                  maybePatchedAddEventListener = this.document.addEventListener; // There're 2 types of Angular applications:\n                  // 1) zone-full (by default)\n                  // 2) zone-less\n                  // The developer can avoid importing the `zone.js` package and tells Angular that he/she is responsible for running\n                  // the change detection by himself. This is done by \"nooping\" the zone through `CompilerOptions` when bootstrapping\n                  // the root module. We fallback to `document.addEventListener` if `__zone_symbol__addEventListener` is not defined,\n                  // this means the `zone.js` is not imported.\n                  // The `__zone_symbol__addEventListener` is basically a native DOM API, which is not patched by zone.js, thus not even going\n                  // through the `zone.js` task lifecycle. You can also access the native DOM API as follows `target[Zone.__symbol__('methodName')]`.\n                  // eslint-disable-next-line @typescript-eslint/dot-notation\n\n                  this.document.addEventListener = this.document['__zone_symbol__addEventListener'] || this.document.addEventListener;\n                  _context.next = 5;\n                  return import('quill');\n\n                case 5:\n                  quillImport = _context.sent;\n                  this.document.addEventListener = maybePatchedAddEventListener;\n                  this.Quill = quillImport.default ? quillImport.default : quillImport;\n\n                case 8:\n                  // Only register custom options and modules once\n                  (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach(function (customOption) {\n                    var newCustomOption = _this2.Quill.import(customOption.import);\n\n                    newCustomOption.whitelist = customOption.whitelist;\n\n                    _this2.Quill.register(newCustomOption, true, _this2.config.suppressGlobalRegisterWarning);\n                  });\n                  (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(function (_ref) {\n                    var implementation = _ref.implementation,\n                        path = _ref.path;\n\n                    _this2.Quill.register(path, implementation, _this2.config.suppressGlobalRegisterWarning);\n                  });\n                  return _context.abrupt(\"return\", this.Quill);\n\n                case 11:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }).pipe(shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }));\n      this.document = injector.get(DOCUMENT);\n\n      if (!this.config) {\n        this.config = {\n          modules: defaultModules\n        };\n      }\n    }\n\n    _createClass(QuillService, [{\n      key: \"getQuill\",\n      value: function getQuill() {\n        return this.quill$;\n      }\n    }]);\n\n    return QuillService;\n  }();\n\n  QuillService.ɵfac = function QuillService_Factory(t) {\n    return new (t || QuillService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(QUILL_CONFIG_TOKEN, 8));\n  };\n\n  QuillService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: QuillService,\n    factory: QuillService.ɵfac,\n    providedIn: 'root'\n  });\n  return QuillService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nvar QuillEditorBase = /*#__PURE__*/(function () {\n  var QuillEditorBase = /*#__PURE__*/function () {\n    function QuillEditorBase(injector, elementRef, cd, domSanitizer, platformId, renderer, zone, service) {\n      var _this3 = this;\n\n      _classCallCheck(this, QuillEditorBase);\n\n      this.elementRef = elementRef;\n      this.cd = cd;\n      this.domSanitizer = domSanitizer;\n      this.platformId = platformId;\n      this.renderer = renderer;\n      this.zone = zone;\n      this.service = service;\n      this.required = false;\n      this.customToolbarPosition = 'top';\n      this.sanitize = false;\n      this.styles = null;\n      this.strict = true;\n      this.customOptions = [];\n      this.customModules = [];\n      this.preserveWhitespace = false;\n      this.trimOnValidation = false;\n      this.compareValues = false;\n      this.filterNull = false;\n      /*\n      https://github.com/KillerCodeMonkey/ngx-quill/issues/1257 - fix null value set\n             provide default empty value\n      by default null\n             e.g. defaultEmptyValue=\"\" - empty string\n             <quill-editor\n        defaultEmptyValue=\"\"\n        formControlName=\"message\"\n      ></quill-editor>\n      */\n\n      this.defaultEmptyValue = null;\n      this.onEditorCreated = new EventEmitter();\n      this.onEditorChanged = new EventEmitter();\n      this.onContentChanged = new EventEmitter();\n      this.onSelectionChanged = new EventEmitter();\n      this.onFocus = new EventEmitter();\n      this.onBlur = new EventEmitter();\n      this.disabled = false; // used to store initial value before ViewInit\n\n      this.subscription = null;\n      this.quillSubscription = null;\n\n      this.valueGetter = function (quillEditor, editorElement) {\n        var html = editorElement.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br></div>') {\n          html = _this3.defaultEmptyValue;\n        }\n\n        var modelValue = html;\n        var format = getFormat(_this3.format, _this3.service.config.format);\n\n        if (format === 'text') {\n          modelValue = quillEditor.getText();\n        } else if (format === 'object') {\n          modelValue = quillEditor.getContents();\n        } else if (format === 'json') {\n          try {\n            modelValue = JSON.stringify(quillEditor.getContents());\n          } catch (e) {\n            modelValue = quillEditor.getText();\n          }\n        }\n\n        return modelValue;\n      };\n\n      this.valueSetter = function (quillEditor, value) {\n        var format = getFormat(_this3.format, _this3.service.config.format);\n\n        if (format === 'html') {\n          if (_this3.sanitize) {\n            value = _this3.domSanitizer.sanitize(SecurityContext.HTML, value);\n          }\n\n          return quillEditor.clipboard.convert(value);\n        } else if (format === 'json') {\n          try {\n            return JSON.parse(value);\n          } catch (e) {\n            return [{\n              insert: value\n            }];\n          }\n        }\n\n        return value;\n      };\n\n      this.selectionChangeHandler = function (range, oldRange, source) {\n        var shouldTriggerOnModelTouched = !range && !!_this3.onModelTouched; // only emit changes when there's any listener\n\n        if (!_this3.onBlur.observers.length && !_this3.onFocus.observers.length && !_this3.onSelectionChanged.observers.length && !shouldTriggerOnModelTouched) {\n          return;\n        }\n\n        _this3.zone.run(function () {\n          if (range === null) {\n            _this3.onBlur.emit({\n              editor: _this3.quillEditor,\n              source: source\n            });\n          } else if (oldRange === null) {\n            _this3.onFocus.emit({\n              editor: _this3.quillEditor,\n              source: source\n            });\n          }\n\n          _this3.onSelectionChanged.emit({\n            editor: _this3.quillEditor,\n            oldRange: oldRange,\n            range: range,\n            source: source\n          });\n\n          if (shouldTriggerOnModelTouched) {\n            _this3.onModelTouched();\n          }\n\n          _this3.cd.markForCheck();\n        });\n      };\n\n      this.textChangeHandler = function (delta, oldDelta, source) {\n        // only emit changes emitted by user interactions\n        var text = _this3.quillEditor.getText();\n\n        var content = _this3.quillEditor.getContents();\n\n        var html = _this3.editorElem.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br></div>') {\n          html = _this3.defaultEmptyValue;\n        }\n\n        var trackChanges = _this3.trackChanges || _this3.service.config.trackChanges;\n        var shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!_this3.onModelChange; // only emit changes when there's any listener\n\n        if (!_this3.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n          return;\n        }\n\n        _this3.zone.run(function () {\n          if (shouldTriggerOnModelChange) {\n            _this3.onModelChange(_this3.valueGetter(_this3.quillEditor, _this3.editorElem));\n          }\n\n          _this3.onContentChanged.emit({\n            content: content,\n            delta: delta,\n            editor: _this3.quillEditor,\n            html: html,\n            oldDelta: oldDelta,\n            source: source,\n            text: text\n          });\n\n          _this3.cd.markForCheck();\n        });\n      }; // eslint-disable-next-line max-len\n\n\n      this.editorChangeHandler = function (event, current, old, source) {\n        // only emit changes when there's any listener\n        if (!_this3.onEditorChanged.observers.length) {\n          return;\n        } // only emit changes emitted by user interactions\n\n\n        if (event === 'text-change') {\n          var text = _this3.quillEditor.getText();\n\n          var content = _this3.quillEditor.getContents();\n\n          var html = _this3.editorElem.querySelector('.ql-editor').innerHTML;\n\n          if (html === '<p><br></p>' || html === '<div><br></div>') {\n            html = _this3.defaultEmptyValue;\n          }\n\n          _this3.zone.run(function () {\n            _this3.onEditorChanged.emit({\n              content: content,\n              delta: current,\n              editor: _this3.quillEditor,\n              event: event,\n              html: html,\n              oldDelta: old,\n              source: source,\n              text: text\n            });\n\n            _this3.cd.markForCheck();\n          });\n        } else {\n          _this3.zone.run(function () {\n            _this3.onEditorChanged.emit({\n              editor: _this3.quillEditor,\n              event: event,\n              oldRange: old,\n              range: current,\n              source: source\n            });\n\n            _this3.cd.markForCheck();\n          });\n        }\n      };\n\n      this.document = injector.get(DOCUMENT);\n    }\n\n    _createClass(QuillEditorBase, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this4 = this;\n\n        if (isPlatformServer(this.platformId)) {\n          return;\n        } // The `quill-editor` component might be destroyed before the `quill` chunk is loaded and its code is executed\n        // this will lead to runtime exceptions, since the code will be executed on DOM nodes that don't exist within the tree.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n        this.quillSubscription = this.service.getQuill().subscribe(function (Quill) {\n          _this4.elementRef.nativeElement.insertAdjacentHTML(_this4.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', _this4.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n\n          _this4.editorElem = _this4.elementRef.nativeElement.querySelector('[quill-editor-element]');\n\n          var toolbarElem = _this4.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n\n          var modules = Object.assign({}, _this4.modules || _this4.service.config.modules);\n\n          if (toolbarElem) {\n            modules.toolbar = toolbarElem;\n          } else if (modules.toolbar === undefined) {\n            modules.toolbar = defaultModules.toolbar;\n          }\n\n          var placeholder = _this4.placeholder !== undefined ? _this4.placeholder : _this4.service.config.placeholder;\n\n          if (placeholder === undefined) {\n            placeholder = 'Insert text here ...';\n          }\n\n          if (_this4.styles) {\n            Object.keys(_this4.styles).forEach(function (key) {\n              _this4.renderer.setStyle(_this4.editorElem, key, _this4.styles[key]);\n            });\n          }\n\n          if (_this4.classes) {\n            _this4.addClasses(_this4.classes);\n          }\n\n          _this4.customOptions.forEach(function (customOption) {\n            var newCustomOption = Quill.import(customOption.import);\n            newCustomOption.whitelist = customOption.whitelist;\n            Quill.register(newCustomOption, true);\n          });\n\n          _this4.customModules.forEach(function (_ref2) {\n            var implementation = _ref2.implementation,\n                path = _ref2.path;\n            Quill.register(path, implementation);\n          });\n\n          var bounds = _this4.bounds && _this4.bounds === 'self' ? _this4.editorElem : _this4.bounds;\n\n          if (!bounds) {\n            bounds = _this4.service.config.bounds ? _this4.service.config.bounds : _this4.document.body;\n          }\n\n          var debug = _this4.debug;\n\n          if (!debug && debug !== false && _this4.service.config.debug) {\n            debug = _this4.service.config.debug;\n          }\n\n          var readOnly = _this4.readOnly;\n\n          if (!readOnly && _this4.readOnly !== false) {\n            readOnly = _this4.service.config.readOnly !== undefined ? _this4.service.config.readOnly : false;\n          }\n\n          var defaultEmptyValue = _this4.defaultEmptyValue;\n\n          if (_this4.service.config.hasOwnProperty('defaultEmptyValue')) {\n            defaultEmptyValue = _this4.service.config.defaultEmptyValue;\n          }\n\n          var scrollingContainer = _this4.scrollingContainer;\n\n          if (!scrollingContainer && _this4.scrollingContainer !== null) {\n            scrollingContainer = _this4.service.config.scrollingContainer === null || _this4.service.config.scrollingContainer ? _this4.service.config.scrollingContainer : null;\n          }\n\n          var formats = _this4.formats;\n\n          if (!formats && formats === undefined) {\n            formats = _this4.service.config.formats ? _toConsumableArray(_this4.service.config.formats) : _this4.service.config.formats === null ? null : undefined;\n          }\n\n          _this4.zone.runOutsideAngular(function () {\n            var _a, _b, _c;\n\n            _this4.quillEditor = new Quill(_this4.editorElem, {\n              bounds: bounds,\n              debug: debug,\n              formats: formats,\n              modules: modules,\n              placeholder: placeholder,\n              readOnly: readOnly,\n              defaultEmptyValue: defaultEmptyValue,\n              scrollingContainer: scrollingContainer,\n              strict: _this4.strict,\n              theme: _this4.theme || (_this4.service.config.theme ? _this4.service.config.theme : 'snow')\n            }); // Set optional link placeholder, Quill has no native API for it so using workaround\n\n            if (_this4.linkPlaceholder) {\n              var tooltip = (_b = (_a = _this4.quillEditor) === null || _a === void 0 ? void 0 : _a.theme) === null || _b === void 0 ? void 0 : _b.tooltip;\n              var input = (_c = tooltip === null || tooltip === void 0 ? void 0 : tooltip.root) === null || _c === void 0 ? void 0 : _c.querySelector('input[data-link]');\n\n              if (input === null || input === void 0 ? void 0 : input.dataset) {\n                input.dataset.link = _this4.linkPlaceholder;\n              }\n            }\n          });\n\n          if (_this4.content) {\n            var format = getFormat(_this4.format, _this4.service.config.format);\n\n            if (format === 'text') {\n              _this4.quillEditor.setText(_this4.content, 'silent');\n            } else {\n              var newValue = _this4.valueSetter(_this4.quillEditor, _this4.content);\n\n              _this4.quillEditor.setContents(newValue, 'silent');\n            }\n\n            _this4.quillEditor.getModule('history').clear();\n          } // initialize disabled status based on this.disabled as default value\n\n\n          _this4.setDisabledState();\n\n          _this4.addQuillEventListeners(); // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n          // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n\n\n          if (!_this4.onEditorCreated.observers.length && !_this4.onValidatorChanged) {\n            return;\n          } // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n          // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n          // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n\n\n          requestAnimationFrame(function () {\n            if (_this4.onValidatorChanged) {\n              _this4.onValidatorChanged();\n            }\n\n            _this4.onEditorCreated.emit(_this4.quillEditor);\n          });\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _a;\n\n        this.dispose();\n        (_a = this.quillSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this.quillSubscription = null;\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        var _this5 = this;\n\n        if (!this.quillEditor) {\n          return;\n        }\n        /* eslint-disable @typescript-eslint/dot-notation */\n\n\n        if (changes.readOnly) {\n          this.quillEditor.enable(!changes.readOnly.currentValue);\n        }\n\n        if (changes.placeholder) {\n          this.quillEditor.root.dataset.placeholder = changes.placeholder.currentValue;\n        }\n\n        if (changes.defaultEmptyValue) {\n          this.quillEditor.root.dataset.defaultEmptyValue = changes.defaultEmptyValue.currentValue;\n        }\n\n        if (changes.styles) {\n          var currentStyling = changes.styles.currentValue;\n          var previousStyling = changes.styles.previousValue;\n\n          if (previousStyling) {\n            Object.keys(previousStyling).forEach(function (key) {\n              _this5.renderer.removeStyle(_this5.editorElem, key);\n            });\n          }\n\n          if (currentStyling) {\n            Object.keys(currentStyling).forEach(function (key) {\n              _this5.renderer.setStyle(_this5.editorElem, key, _this5.styles[key]);\n            });\n          }\n        }\n\n        if (changes.classes) {\n          var currentClasses = changes.classes.currentValue;\n          var previousClasses = changes.classes.previousValue;\n\n          if (previousClasses) {\n            this.removeClasses(previousClasses);\n          }\n\n          if (currentClasses) {\n            this.addClasses(currentClasses);\n          }\n        } // We'd want to re-apply event listeners if the `debounceTime` binding changes to apply the\n        // `debounceTime` operator or vice-versa remove it.\n\n\n        if (changes.debounceTime) {\n          this.addQuillEventListeners();\n        }\n        /* eslint-enable @typescript-eslint/dot-notation */\n\n      }\n    }, {\n      key: \"addClasses\",\n      value: function addClasses(classList) {\n        var _this6 = this;\n\n        QuillEditorBase.normalizeClassNames(classList).forEach(function (c) {\n          _this6.renderer.addClass(_this6.editorElem, c);\n        });\n      }\n    }, {\n      key: \"removeClasses\",\n      value: function removeClasses(classList) {\n        var _this7 = this;\n\n        QuillEditorBase.normalizeClassNames(classList).forEach(function (c) {\n          _this7.renderer.removeClass(_this7.editorElem, c);\n        });\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(currentValue) {\n        // optional fix for https://github.com/angular/angular/issues/14988\n        if (this.filterNull && currentValue === null) {\n          return;\n        }\n\n        this.content = currentValue;\n\n        if (!this.quillEditor) {\n          return;\n        }\n\n        var format = getFormat(this.format, this.service.config.format);\n        var newValue = this.valueSetter(this.quillEditor, currentValue);\n\n        if (this.compareValues) {\n          var currentEditorValue = this.quillEditor.getContents();\n\n          if (JSON.stringify(currentEditorValue) === JSON.stringify(newValue)) {\n            return;\n          }\n        }\n\n        if (currentValue) {\n          if (format === 'text') {\n            this.quillEditor.setText(currentValue);\n          } else {\n            this.quillEditor.setContents(newValue);\n          }\n\n          return;\n        }\n\n        this.quillEditor.setText('');\n      }\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState() {\n        var isDisabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.disabled;\n        // store initial value to set appropriate disabled status after ViewInit\n        this.disabled = isDisabled;\n\n        if (this.quillEditor) {\n          if (isDisabled) {\n            this.quillEditor.disable();\n            this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n          } else {\n            if (!this.readOnly) {\n              this.quillEditor.enable();\n            }\n\n            this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n          }\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onModelChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onModelTouched = fn;\n      }\n    }, {\n      key: \"registerOnValidatorChange\",\n      value: function registerOnValidatorChange(fn) {\n        this.onValidatorChanged = fn;\n      }\n    }, {\n      key: \"validate\",\n      value: function validate() {\n        if (!this.quillEditor) {\n          return null;\n        }\n\n        var err = {};\n        var valid = true;\n        var text = this.quillEditor.getText(); // trim text if wanted + handle special case that an empty editor contains a new line\n\n        var textLength = this.trimOnValidation ? text.trim().length : text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1;\n        var deltaOperations = this.quillEditor.getContents().ops;\n        var onlyEmptyOperation = deltaOperations && deltaOperations.length === 1 && ['\\n', ''].includes(deltaOperations[0].insert);\n\n        if (this.minLength && textLength && textLength < this.minLength) {\n          err.minLengthError = {\n            given: textLength,\n            minLength: this.minLength\n          };\n          valid = false;\n        }\n\n        if (this.maxLength && textLength > this.maxLength) {\n          err.maxLengthError = {\n            given: textLength,\n            maxLength: this.maxLength\n          };\n          valid = false;\n        }\n\n        if (this.required && !textLength && onlyEmptyOperation) {\n          err.requiredError = {\n            empty: true\n          };\n          valid = false;\n        }\n\n        return valid ? null : err;\n      }\n    }, {\n      key: \"addQuillEventListeners\",\n      value: function addQuillEventListeners() {\n        var _this8 = this;\n\n        this.dispose(); // We have to enter the `<root>` zone when adding event listeners, so `debounceTime` will spawn the\n        // `AsyncAction` there w/o triggering change detections. We still re-enter the Angular's zone through\n        // `zone.run` when we emit an event to the parent component.\n\n        this.zone.runOutsideAngular(function () {\n          _this8.subscription = new Subscription();\n\n          _this8.subscription.add( // mark model as touched if editor lost focus\n          fromEvent(_this8.quillEditor, 'selection-change').subscribe(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 3),\n                range = _ref4[0],\n                oldRange = _ref4[1],\n                source = _ref4[2];\n\n            _this8.selectionChangeHandler(range, oldRange, source);\n          })); // The `fromEvent` supports passing JQuery-style event targets, the editor has `on` and `off` methods which\n          // will be invoked upon subscription and teardown.\n\n\n          var textChange$ = fromEvent(_this8.quillEditor, 'text-change');\n          var editorChange$ = fromEvent(_this8.quillEditor, 'editor-change');\n\n          if (typeof _this8.debounceTime === 'number') {\n            textChange$ = textChange$.pipe(debounceTime(_this8.debounceTime));\n            editorChange$ = editorChange$.pipe(debounceTime(_this8.debounceTime));\n          }\n\n          _this8.subscription.add( // update model if text changes\n          textChange$.subscribe(function (_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 3),\n                delta = _ref6[0],\n                oldDelta = _ref6[1],\n                source = _ref6[2];\n\n            _this8.textChangeHandler(delta, oldDelta, source);\n          }));\n\n          _this8.subscription.add( // triggered if selection or text changed\n          editorChange$.subscribe(function (_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 4),\n                event = _ref8[0],\n                current = _ref8[1],\n                old = _ref8[2],\n                source = _ref8[3];\n\n            _this8.editorChangeHandler(event, current, old, source);\n          }));\n        });\n      }\n    }, {\n      key: \"dispose\",\n      value: function dispose() {\n        if (this.subscription !== null) {\n          this.subscription.unsubscribe();\n          this.subscription = null;\n        }\n      }\n    }], [{\n      key: \"normalizeClassNames\",\n      value: function normalizeClassNames(classes) {\n        var classList = classes.trim().split(' ');\n        return classList.reduce(function (prev, cur) {\n          var trimmed = cur.trim();\n\n          if (trimmed) {\n            prev.push(trimmed);\n          }\n\n          return prev;\n        }, []);\n      }\n    }]);\n\n    return QuillEditorBase;\n  }();\n\n  QuillEditorBase.ɵfac = function QuillEditorBase_Factory(t) {\n    return new (t || QuillEditorBase)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(QuillService));\n  };\n\n  QuillEditorBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: QuillEditorBase,\n    inputs: {\n      format: \"format\",\n      theme: \"theme\",\n      modules: \"modules\",\n      debug: \"debug\",\n      readOnly: \"readOnly\",\n      placeholder: \"placeholder\",\n      maxLength: \"maxLength\",\n      minLength: \"minLength\",\n      required: \"required\",\n      formats: \"formats\",\n      customToolbarPosition: \"customToolbarPosition\",\n      sanitize: \"sanitize\",\n      styles: \"styles\",\n      strict: \"strict\",\n      scrollingContainer: \"scrollingContainer\",\n      bounds: \"bounds\",\n      customOptions: \"customOptions\",\n      customModules: \"customModules\",\n      trackChanges: \"trackChanges\",\n      preserveWhitespace: \"preserveWhitespace\",\n      classes: \"classes\",\n      trimOnValidation: \"trimOnValidation\",\n      linkPlaceholder: \"linkPlaceholder\",\n      compareValues: \"compareValues\",\n      filterNull: \"filterNull\",\n      debounceTime: \"debounceTime\",\n      defaultEmptyValue: \"defaultEmptyValue\",\n      valueGetter: \"valueGetter\",\n      valueSetter: \"valueSetter\"\n    },\n    outputs: {\n      onEditorCreated: \"onEditorCreated\",\n      onEditorChanged: \"onEditorChanged\",\n      onContentChanged: \"onContentChanged\",\n      onSelectionChanged: \"onSelectionChanged\",\n      onFocus: \"onFocus\",\n      onBlur: \"onBlur\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return QuillEditorBase;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar QuillEditorComponent = /*#__PURE__*/(function () {\n  var QuillEditorComponent = /*#__PURE__*/function (_QuillEditorBase) {\n    _inherits(QuillEditorComponent, _QuillEditorBase);\n\n    var _super = _createSuper(QuillEditorComponent);\n\n    function QuillEditorComponent(injector, elementRef, cd, domSanitizer, platformId, renderer, zone, service) {\n      _classCallCheck(this, QuillEditorComponent);\n\n      return _super.call(this, injector, elementRef, cd, domSanitizer, platformId, renderer, zone, service);\n    }\n\n    return _createClass(QuillEditorComponent);\n  }(QuillEditorBase);\n\n  QuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) {\n    return new (t || QuillEditorComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(DomSanitizer), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone), i0.ɵɵdirectiveInject(QuillService));\n  };\n\n  QuillEditorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QuillEditorComponent,\n    selectors: [[\"quill-editor\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      multi: true,\n      provide: NG_VALUE_ACCESSOR,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(function () {\n        return QuillEditorComponent;\n      })\n    }, {\n      multi: true,\n      provide: NG_VALIDATORS,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      useExisting: forwardRef(function () {\n        return QuillEditorComponent;\n      })\n    }]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function QuillEditorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c0);\n        i0.ɵɵprojection(0);\n      }\n    },\n    styles: [\":host{display:inline-block}\\n\"],\n    encapsulation: 2\n  });\n  return QuillEditorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar QuillViewHTMLComponent = /*#__PURE__*/(function () {\n  var QuillViewHTMLComponent = /*#__PURE__*/function () {\n    function QuillViewHTMLComponent(sanitizer, service) {\n      _classCallCheck(this, QuillViewHTMLComponent);\n\n      this.sanitizer = sanitizer;\n      this.service = service;\n      this.content = '';\n      this.sanitize = false;\n      this.innerHTML = '';\n      this.themeClass = 'ql-snow';\n    }\n\n    _createClass(QuillViewHTMLComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (changes.theme) {\n          var theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');\n          this.themeClass = \"ql-\".concat(theme, \" ngx-quill-view-html\");\n        } else if (!this.theme) {\n          var _theme = this.service.config.theme ? this.service.config.theme : 'snow';\n\n          this.themeClass = \"ql-\".concat(_theme, \" ngx-quill-view-html\");\n        }\n\n        if (changes.content) {\n          var content = changes.content.currentValue;\n          this.innerHTML = this.sanitize ? content : this.sanitizer.bypassSecurityTrustHtml(content);\n        }\n      }\n    }]);\n\n    return QuillViewHTMLComponent;\n  }();\n\n  QuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) {\n    return new (t || QuillViewHTMLComponent)(i0.ɵɵdirectiveInject(DomSanitizer), i0.ɵɵdirectiveInject(QuillService));\n  };\n\n  QuillViewHTMLComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QuillViewHTMLComponent,\n    selectors: [[\"quill-view-html\"]],\n    inputs: {\n      content: \"content\",\n      theme: \"theme\",\n      sanitize: \"sanitize\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]],\n    template: function QuillViewHTMLComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.themeClass);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, i0.ɵɵsanitizeHtml);\n      }\n    },\n    directives: [i2.NgClass],\n    styles: [\".ql-container.ngx-quill-view-html{border:0}\\n\"],\n    encapsulation: 2\n  });\n  return QuillViewHTMLComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar QuillViewComponent = /*#__PURE__*/(function () {\n  var QuillViewComponent = /*#__PURE__*/function () {\n    function QuillViewComponent(elementRef, renderer, zone, service, domSanitizer, platformId) {\n      var _this9 = this;\n\n      _classCallCheck(this, QuillViewComponent);\n\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.zone = zone;\n      this.service = service;\n      this.domSanitizer = domSanitizer;\n      this.platformId = platformId;\n      this.sanitize = false;\n      this.strict = true;\n      this.customModules = [];\n      this.customOptions = [];\n      this.preserveWhitespace = false;\n      this.onEditorCreated = new EventEmitter();\n      this.quillSubscription = null;\n\n      this.valueSetter = function (quillEditor, value) {\n        var format = getFormat(_this9.format, _this9.service.config.format);\n        var content = value;\n\n        if (format === 'text') {\n          quillEditor.setText(content);\n        } else {\n          if (format === 'html') {\n            if (_this9.sanitize) {\n              value = _this9.domSanitizer.sanitize(SecurityContext.HTML, value);\n            }\n\n            content = quillEditor.clipboard.convert(value);\n          } else if (format === 'json') {\n            try {\n              content = JSON.parse(value);\n            } catch (e) {\n              content = [{\n                insert: value\n              }];\n            }\n          }\n\n          quillEditor.setContents(content);\n        }\n      };\n    }\n\n    _createClass(QuillViewComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this.quillEditor) {\n          return;\n        }\n\n        if (changes.content) {\n          this.valueSetter(this.quillEditor, changes.content.currentValue);\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this10 = this;\n\n        if (isPlatformServer(this.platformId)) {\n          return;\n        } // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n        this.quillSubscription = this.service.getQuill().subscribe(function (Quill) {\n          var modules = Object.assign({}, _this10.modules || _this10.service.config.modules);\n          modules.toolbar = false;\n\n          _this10.customOptions.forEach(function (customOption) {\n            var newCustomOption = Quill.import(customOption.import);\n            newCustomOption.whitelist = customOption.whitelist;\n            Quill.register(newCustomOption, true);\n          });\n\n          _this10.customModules.forEach(function (_ref9) {\n            var implementation = _ref9.implementation,\n                path = _ref9.path;\n            Quill.register(path, implementation);\n          });\n\n          var debug = _this10.debug;\n\n          if (!debug && debug !== false && _this10.service.config.debug) {\n            debug = _this10.service.config.debug;\n          }\n\n          var formats = _this10.formats;\n\n          if (!formats && formats === undefined) {\n            formats = _this10.service.config.formats ? Object.assign({}, _this10.service.config.formats) : _this10.service.config.formats === null ? null : undefined;\n          }\n\n          var theme = _this10.theme || (_this10.service.config.theme ? _this10.service.config.theme : 'snow');\n\n          _this10.elementRef.nativeElement.insertAdjacentHTML('afterbegin', _this10.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n\n          _this10.editorElem = _this10.elementRef.nativeElement.querySelector('[quill-view-element]');\n\n          _this10.zone.runOutsideAngular(function () {\n            _this10.quillEditor = new Quill(_this10.editorElem, {\n              debug: debug,\n              formats: formats,\n              modules: modules,\n              readOnly: true,\n              strict: _this10.strict,\n              theme: theme\n            });\n          });\n\n          _this10.renderer.addClass(_this10.editorElem, 'ngx-quill-view');\n\n          if (_this10.content) {\n            _this10.valueSetter(_this10.quillEditor, _this10.content);\n          } // The `requestAnimationFrame` triggers change detection. There's no sense to invoke the `requestAnimationFrame` if anyone is\n          // listening to the `onEditorCreated` event inside the template, for instance `<quill-view (onEditorCreated)=\"...\">`.\n\n\n          if (!_this10.onEditorCreated.observers.length) {\n            return;\n          } // The `requestAnimationFrame` will trigger change detection and `onEditorCreated` will also call `markDirty()`\n          // internally, since Angular wraps template event listeners into `listener` instruction. We're using the `requestAnimationFrame`\n          // to prevent the frame drop and avoid `ExpressionChangedAfterItHasBeenCheckedError` error.\n\n\n          requestAnimationFrame(function () {\n            _this10.onEditorCreated.emit(_this10.quillEditor);\n          });\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        var _a;\n\n        (_a = this.quillSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this.quillSubscription = null;\n      }\n    }]);\n\n    return QuillViewComponent;\n  }();\n\n  QuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) {\n    return new (t || QuillViewComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(QuillService), i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  QuillViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QuillViewComponent,\n    selectors: [[\"quill-view\"]],\n    inputs: {\n      format: \"format\",\n      theme: \"theme\",\n      modules: \"modules\",\n      debug: \"debug\",\n      formats: \"formats\",\n      sanitize: \"sanitize\",\n      strict: \"strict\",\n      content: \"content\",\n      customModules: \"customModules\",\n      customOptions: \"customOptions\",\n      preserveWhitespace: \"preserveWhitespace\"\n    },\n    outputs: {\n      onEditorCreated: \"onEditorCreated\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function QuillViewComponent_Template(rf, ctx) {},\n    styles: [\".ql-container.ngx-quill-view{border:0}\\n\"],\n    encapsulation: 2\n  });\n  return QuillViewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar QuillModule = /*#__PURE__*/(function () {\n  var QuillModule = /*#__PURE__*/function () {\n    function QuillModule() {\n      _classCallCheck(this, QuillModule);\n    }\n\n    _createClass(QuillModule, null, [{\n      key: \"forRoot\",\n      value: function forRoot(config) {\n        return {\n          ngModule: QuillModule,\n          providers: [{\n            provide: QUILL_CONFIG_TOKEN,\n            useValue: config\n          }]\n        };\n      }\n    }]);\n\n    return QuillModule;\n  }();\n\n  QuillModule.ɵfac = function QuillModule_Factory(t) {\n    return new (t || QuillModule)();\n  };\n\n  QuillModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QuillModule\n  });\n  QuillModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return QuillModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-quill\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent, defaultModules }; //# sourceMappingURL=ngx-quill.mjs.map","map":null,"metadata":{},"sourceType":"module"}